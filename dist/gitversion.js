/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-gitversion",
factory: function (require) {
var plugin=(()=>{var Re=Object.create,A=Object.defineProperty;var Te=Object.getOwnPropertyDescriptor;var Ve=Object.getOwnPropertyNames;var $e=Object.getPrototypeOf,Be=Object.prototype.hasOwnProperty;var Ge=t=>A(t,"__esModule",{value:!0});var h=t=>{if(typeof require!="undefined")return require(t);throw new Error('Dynamic require of "'+t+'" is not supported')};var I=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Ne=(t,e)=>{for(var r in e)A(t,r,{get:e[r],enumerable:!0})},We=(t,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of Ve(e))!Be.call(t,n)&&n!=="default"&&A(t,n,{get:()=>e[n],enumerable:!(r=Te(e,n))||r.enumerable});return t},x=t=>We(Ge(A(t!=null?Re($e(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var ie=I((K,ne)=>{(function(t,e){typeof define=="function"&&define.amd?define([],e):typeof K=="object"?ne.exports=e():t.compareVersions=e()})(K,function(){var t=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;function e(i,o){return i.indexOf(o)===-1?i.length:i.indexOf(o)}function r(i){var o=i.replace(/^v/,"").replace(/\+.*$/,""),p=e(o,"-"),l=o.substring(0,p).split(".");return l.push(o.substring(p+1)),l}function n(i){var o=parseInt(i,10);return isNaN(o)?i:o}function a(i){if(typeof i!="string")throw new TypeError("Invalid argument expected string");var o=i.match(t);if(!o)throw new Error("Invalid argument not valid semver ('"+i+"' received)");return o.shift(),o}function s(i,o){return typeof i!=typeof o?[String(i),String(o)]:[i,o]}function u(i,o){var[p,l]=s(n(i),n(o));return p>l?1:p<l?-1:0}function m(i,o){for(var p=0;p<Math.max(i.length,o.length);p++){var l=u(i[p]||0,o[p]||0);if(l!==0)return l}return 0}function c(i,o){[i,o].forEach(a);for(var p=r(i),l=r(o),f=0;f<Math.max(p.length-1,l.length-1);f++){var P=parseInt(p[f]||0,10),k=parseInt(l[f]||0,10);if(P>k)return 1;if(k>P)return-1}var L=p[p.length-1],R=l[l.length-1];if(L&&R){var v=L.split(".").map(n),C=R.split(".").map(n);for(f=0;f<Math.max(v.length,C.length);f++){if(v[f]===void 0||typeof C[f]=="string"&&typeof v[f]=="number")return-1;if(C[f]===void 0||typeof v[f]=="string"&&typeof C[f]=="number"||v[f]>C[f])return 1;if(C[f]>v[f])return-1}}else if(L||R)return L?-1:1;return 0}var d=[">",">=","=","<","<="],g={">":[1],">=":[0,1],"=":[0],"<=":[-1,0],"<":[-1]};function E(i){if(typeof i!="string")throw new TypeError("Invalid operator type, expected string but got "+typeof i);if(d.indexOf(i)===-1)throw new TypeError("Invalid operator, expected one of "+d.join("|"))}return c.validate=function(i){return typeof i=="string"&&t.test(i)},c.compare=function(i,o,p){E(p);var l=c(i,o);return g[p].indexOf(l)>-1},c.satisfies=function(i,o){var p=o.match(/^([<>=~^]+)/),l=p?p[1]:"=";if(l!=="^"&&l!=="~")return c.compare(i,o,l);var[f,P,k]=a(i),[L,R,v]=a(o);return u(f,L)!==0?!1:l==="^"?m([P,k],[R,v])>=0:u(P,R)!==0?!1:u(k,v)>=0},c})});var me=I((Dt,J)=>{(function(){"use strict";var t=h("fs"),e=h("string_decoder").StringDecoder;function r(s,u,m,c,d){var g=0,c=c||"utf8",m=m||`
`,d=d||1024,E=new Buffer(d),i="",o=new e(c),p=!1,l=!1,f=-1;function P(){p||(t.close(s,function(v){if(v)throw v}),p=!0)}function k(v){function C(){t.read(s,E,0,d,g,function(O,S){var Q;if(O)throw O;S<d&&(l=!0,P()),g+=S,i+=o.write(E.slice(0,S)),f<0&&(f=i.indexOf(m)),Q=f===i.length-1,S&&(f===-1||Q)&&!l?C():v()})}C()}function L(){return i.length>0||!l}function R(v){function C(){var O=i.substring(0,f);i=i.substring(f+m.length),f=-1,v(O)}if(f<0&&(f=i.indexOf(m)),f<0)if(l)if(L())f=i.length,C();else throw new Error("No more lines to read.");else k(C);else C()}this.hasNextLine=L,this.nextLine=R,this.close=P,k(u)}function n(s,u,m,c,d){t.open(s,"r",parseInt("666",8),function(g,E){var i;if(g)throw g;i=new r(E,function(){u(i)},m,c,d)})}function a(s,u,m,c,d){var g,E=u.length==3;function i(){g&&typeof g=="function"&&g()}return n(s,function(o){function p(){o.hasNextLine()?setImmediate(f):i()}function l(P){P!==!1?p():(i(),o.close())}function f(){o.nextLine(function(P){var k=!o.hasNextLine();E?u(P,k,l):u(P,k)!==!1?p():(i(),o.close())})}p()},m,c,d),{then:function(o){g=o}}}J.exports.open=n,J.exports.eachLine=a})()});var he=I((qt,ge)=>{ge.exports=function(t,e){e=e||{},e.listUnicodeChar=e.hasOwnProperty("listUnicodeChar")?e.listUnicodeChar:!1,e.stripListLeaders=e.hasOwnProperty("stripListLeaders")?e.stripListLeaders:!0,e.gfm=e.hasOwnProperty("gfm")?e.gfm:!0;var r=t||"";r=r.replace(/^(-\s*?|\*\s*?|_\s*?){3,}\s*$/gm,"");try{e.stripListLeaders&&(e.listUnicodeChar?r=r.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm,e.listUnicodeChar+" $1"):r=r.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm,"$1")),e.gfm&&(r=r.replace(/\n={2,}/g,`
`).replace(/~~/g,"").replace(/`{3}.*\n/g,"")),r=r.replace(/<[^>]*>/g,"").replace(/^[=\-]{2,}\s*$/g,"").replace(/\[\^.+?\](\: .*?$)?/g,"").replace(/\s{0,2}\[.*?\]: .*?$/g,"").replace(/\!\[.*?\][\[\(].*?[\]\)]/g,"").replace(/\[(.*?)\][\[\(].*?[\]\)]/g,"$1").replace(/^\s{0,3}>\s?/g,"").replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g,"").replace(/^(\n)?\s{0,}#{1,6}\s+| {0,}(\n)?\s{0,}#{0,} {0,}(\n)?\s{0,}$/gm,"$1$2$3").replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g,"$2").replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g,"$2").replace(/(`{3,})(.*?)\1/gm,"$2").replace(/`(.+?)`/g,"$1").replace(/\n{2,}/g,`

`)}catch(n){return console.error(n),t}return r}});var Ee=I((Ht,ye)=>{var W=h("os").EOL,Ae=me(),Ie=he(),de=/\[?v?([\w\d.-]+\.[\w\d.-]+[a-zA-Z0-9])\]?/,xe=/.*[ ](\d\d?\d?\d?[-/.]\d\d?[-/.]\d\d?\d?\d?).*/,je=/^###/,Me=/^[*-]/,Ue={removeMarkdown:!0};function _e(t,e){if(typeof t=="undefined")throw new Error("missing options argument");if(typeof t=="string"&&(t={filePath:t}),typeof t=="object"){let a=typeof t.filePath!="undefined",s=typeof t.text!="undefined",u=typeof t.filePath!="string",m=typeof t.text!="string";if(!a&&!s)throw new Error("must provide filePath or text");if(a&&u)throw new Error("invalid filePath, expected string");if(s&&m)throw new Error("invalid text, expected string")}let r=Object.assign({},Ue,t),n=Fe(r);return typeof e=="function"&&n.then(function(a){e(null,a)}).catch(function(a){e(a)}),n}function Fe(t){let e=t.filePath,r=t.text,n={log:{versions:[]},current:null},a=De.bind(n,t);return new Promise(function(s,u){function m(){n.current&&ve(n),n.log.description=we(n.log.description),n.log.description===""&&delete n.log.description,s(n.log)}r?(r.split(/\r\n?|\n/mg).forEach(a),m()):Ae.eachLine(e,a,W).then(m)})}function De(t,e){if(!e.match(/^\[[^[\]]*\] *?:/)){if(!this.log.title&&e.match(/^# ?[^#]/)){this.log.title=e.substring(1).trim();return}if(e.match(/^##? ?[^#]/)){this.current&&this.current.title&&ve(this),this.current=qe(),de.exec(e)&&(this.current.version=de.exec(e)[1]),this.current.title=e.substring(2).trim(),this.current.title&&xe.exec(this.current.title)&&(this.current.date=xe.exec(this.current.title)[1]);return}if(this.current){if(this.current.body+=e+W,je.exec(e)){let r=e.replace("###","").trim();this.current.parsed[r]||(this.current.parsed[r]=[],this.current._private.activeSubhead=r)}if(Me.exec(e)){let r=t.removeMarkdown?Ie(e):e;this.current.parsed._.push(r),this.current._private.activeSubhead&&this.current.parsed[this.current._private.activeSubhead].push(r)}}else this.log.description=(this.log.description||"")+e+W}}function qe(){return{version:null,title:null,date:null,body:"",parsed:{_:[]},_private:{activeSubhead:null}}}function ve(t){delete t.current._private,t.current.body=we(t.current.body),t.log.versions.push(t.current)}function we(t){return t?(t=t.trim(),t=t.replace(new RegExp("["+W+"]*"),""),t=t.replace(new RegExp("["+W+"]*$"),""),t):""}ye.exports=_e});var Ze={};Ne(Ze,{default:()=>Ke});var T=x(h("@yarnpkg/core")),re=x(h("clipanion"));var w;(function(s){s.MAIN="main",s.PRERELEASE="prerelease",s.RELEASE="release",s.FEATURE="feature",s.UNKNOWN="unknown"})(w||(w={}));var X=x(h("child_process"));async function b(t,e,r){return new Promise((n,a)=>{console.log(">>>",t,...e);let s=(0,X.spawn)(t,e,{cwd:r}),u="",m="";s.stdout.on("data",c=>{u+=c.toString()}),s.stderr.on("data",c=>{m+=c.toString()}),s.on("close",c=>{c===0?n({code:c,result:u}):a(new Error(u+m))})})}async function Y(){return process.env.BUILD_SOURCEBRANCHNAME?process.env.BUILD_SOURCEBRANCHNAME:(await b("git",["rev-parse","--abbrev-ref","HEAD"])).result.replace(/\n*$/,"")}async function ee(t){return b("git",["tag",t])}async function te(t,e){let r=await b("git",["add",...t]);console.log(r.result);let n=await b("git",["commit",...t,"-m",e]);console.log(n.result)}var V="0.0.0",H=class{static async fromContext(e){let r=await T.Configuration.find(e.cwd,e.plugins),n=await Y();return new H(r,n)}constructor(e,r){this.yarnConfig=e;let n=e.get("featureBranchPatterns");console.log(n),console.log(r),this.featureBranchPatterns=n.map(a=>new RegExp(a)),this.mainBranch=e.get("mainBranch"),this.independentVersioning=e.get("independentVersioning"),this.versionTagPrefix=e.get("versionTagPrefix"),this.versionBranch=this.parse(r)}parse(e){if(this.mainBranch===e)return{branchType:w.MAIN,name:e};for(let r of this.featureBranchPatterns)if(r.test(e)){let n=r.exec(e);if(n&&n.length===2)return{name:n[1],branchType:w.FEATURE};throw new re.UsageError(`The feature pattern '${r.source}' matched the current branch but it should result in exact 1 group match`)}return{name:"unknown",branchType:w.UNKNOWN}}},y=H;y.definition={featureBranchPatterns:{description:`Feature branches. This will apply the following rules to bumps:
  - version pattern: 'x.x.x-<<feature>>.<<increment>>'
  - always increment on each commit
  - no checking for conventional commits in git history
  - publish on npm channel '<<feature>>'`,isArray:!0,type:T.SettingsType.STRING,default:["^feature/(.*)$"]},releaseBranchPatterns:{description:`Release branches. This will apply the following rules to bumps:
  - Official release channels
  - Conventional commits enabled
  - publish on npm channel '<<release>>'`,isArray:!0,type:T.SettingsType.STRING,default:["^release/(.*)$"]},mainBranch:{description:"The main branch. This is the official channel and will produce npm packages with the lates npm disttag",type:T.SettingsType.STRING,default:"main"},independentVersioning:{description:"When independent versioning is enabled each package will have a different version based on the commits in the package folder",type:T.SettingsType.BOOLEAN,default:!1},versionTagPrefix:{description:'The prefix used for git tags. Defaults to "v"',type:T.SettingsType.STRING,default:"v"}};var oe=x(h("@yarnpkg/cli")),se=x(h("@yarnpkg/core"));function N(t,e){let r=t;return e&&(e.scope&&(r+=`@${e.scope}/`),r+=e.name,r+="-"),r}async function j(t,e){return Promise.all(t.map(r=>z(r,e)))}async function z(t,e){if(t.manifest.version!==e)return console.log(`@${t.locator.scope}/${t.locator.name}`,t.manifest.version,"=>",e),t.manifest.version=e,t.persistManifest()}var Oe=ie(),$=class extends oe.BaseCommand{async execute(){let e=await y.fromContext(this.context),{project:r}=await se.Project.find(e.yarnConfig,this.context.cwd);if(e.independentVersioning){let n=r.workspaces.map(a=>this.updateWorkspaceFromGit(e.versionTagPrefix,e.versionBranch,a));Promise.all(n)}else{let n=[this.determineCurrentGitVersion(e.versionTagPrefix,e.versionBranch),...r.workspaces.map(s=>this.determineCurrentGitVersion(e.versionTagPrefix,e.versionBranch,s.locator))],a=(await Promise.all(n)).sort(Oe).reverse();await j(r.workspaces,a[0])}}async updateWorkspaceFromGit(e,r,n){let a=await this.determineCurrentGitVersion(e,r,n.locator);return z(n,a)}async determineCurrentGitVersion(e,r,n){let a=N(e,n),s=`${a}*`,c=(await b("git",["-c","versionsort.suffix=-","tag","--sort=-version:refname","--list",s])).result.split(`
`),d=c.filter(o=>new RegExp(`^${this.escapeRegExp(a)}[0-9]+.[0-9]+.[0-9]+$`).test(o));if(r.branchType!==w.MAIN){let o=c.filter(p=>new RegExp(`${a}[0-9]+.[0-9]+.[0-9]+-${this.escapeRegExp(r.name)}.[0-9]+$`).test(p));o.length>0?c=o:c=d}else c=d;c=c.filter(o=>o);let g;c.length>0?g=c[0]:g="0.0.0";let E=g,i=new RegExp(`^${this.escapeRegExp(a)}`);return E=E.replace(i,""),E}escapeRegExp(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}};$.paths=[["gitversion","restore"]];var ae=x(h("@yarnpkg/cli")),M=x(h("@yarnpkg/core"));var U=class extends ae.BaseCommand{async execute(){let e=await M.Configuration.find(this.context.cwd,this.context.plugins),{project:r}=await M.Project.find(e,this.context.cwd);await j(r.workspaces,V)}};U.paths=[["gitversion","reset"]];var ce=x(h("@yarnpkg/cli")),_=x(h("@yarnpkg/core"));var Se=["--no-sign","--skip.commit","--skip.tag"];async function Z(t,e,r,n,a){let s=[...Se];if(s.push(`--path='${r}'`),s.push(`--tag-prefix='${e}'`),s.push(`--infile='${r}/CHANGELOG.md'`),a&&(s.push(`--release-as='${a}'`),s.push("--skip.bump")),t.branchType===w.FEATURE)s.push(`--prerelease=${t.name}`,"--skip.changelog"),a||s.push("--release-as=patch");else if(t.branchType===w.PRERELEASE||t.branchType===w.RELEASE)s.push(`--prerelease=${t.name}`);else if(t.branchType===w.UNKNOWN)return;let u=await b("yarn",["standard-version",...s],n);console.log(u.result)}var F=class extends ce.BaseCommand{async execute(){let e=new $;e.context=this.context,e.cli=this.cli,await e.execute();let r=await y.fromContext(this.context),{project:n}=await _.Project.find(r.yarnConfig,this.context.cwd);if(r.independentVersioning)throw new Error("Not implemented");{await Z(r.versionBranch,N(r.versionTagPrefix),n.topLevelWorkspace.cwd,n.topLevelWorkspace.cwd);let s=(await _.Manifest.find(n.topLevelWorkspace.cwd)).version;if(s){let u=n.topLevelWorkspace.getRecursiveWorkspaceChildren().map(async m=>(m.manifest.version=s,await m.persistManifest(),Z(r.versionBranch,N(r.versionTagPrefix),m.cwd,n.topLevelWorkspace.cwd,s)));await Promise.all(u)}}}};F.paths=[["gitversion","bump"]];var Pe=x(h("@yarnpkg/cli")),Ce=x(h("@yarnpkg/core"));var ke=x(h("path"));var fe=x(h("@yarnpkg/cli")),pe=x(h("@yarnpkg/core"));var B=class extends fe.BaseCommand{async execute(){let e=await y.fromContext(this.context),{project:r}=await pe.Project.find(e.yarnConfig,this.context.cwd);if(e.independentVersioning)throw new Error("Not implemented");{let n=r.topLevelWorkspace.manifest.version;n&&n!==V&&await ee(`${e.versionTagPrefix}${n}`)}}};B.paths=[["gitversion","tag"]];var le=x(h("@yarnpkg/cli")),ue=x(h("@yarnpkg/core"));var G=class extends le.BaseCommand{async execute(){let e=await y.fromContext(this.context),{project:r}=await ue.Project.find(e.yarnConfig,this.context.cwd);if(e.independentVersioning)throw new Error("Not implemented");{let n=r.topLevelWorkspace.manifest.version;n&&n!==V&&await te(["**/CHANGELOG.md"],`chore(release): ${n}`)}}};G.paths=[["gitversion","commit"]];var He=Ee(),D=class extends Pe.BaseCommand{async execute(){let e=new B;e.context=this.context,e.cli=this.cli,await e.execute();let r=new G;r.context=this.context,r.cli=this.cli,await r.execute();let n=await y.fromContext(this.context),{project:a}=await Ce.Project.find(n.yarnConfig,this.context.cwd);if(n.independentVersioning)throw new Error("Not implemented");{let u=a.workspaces.filter(g=>g.manifest.private===!1).map(g=>{let E=[];(n.versionBranch.branchType===w.FEATURE||n.versionBranch.branchType===w.PRERELEASE)&&(E=["--tag",n.versionBranch.name]),b("yarn",["npm","publish",...E],g.cwd)});await Promise.all(u);let m=await He({filePath:(0,ke.join)(a.topLevelWorkspace.cwd,"CHANGELOG.md"),removeMarkdown:!1}),c=a.topLevelWorkspace.manifest.version,d=m.versions.find(g=>g.version===c);d&&await a.configuration.triggerHook(g=>g.afterPublish,a,a.topLevelWorkspace,d)}}};D.paths=[["gitversion","publish"]];var be=x(h("@yarnpkg/cli")),Le=x(h("@yarnpkg/core"));var q=class extends be.BaseCommand{async execute(){let e=await y.fromContext(this.context);console.log(e.versionBranch);let{project:r}=await Le.Project.find(e.yarnConfig,this.context.cwd);r.workspaces.forEach(n=>{console.log(n.locator.scope,n.locator.name,n.manifest.private,n.manifest.version)})}};q.paths=[["gitversion","check"]];var ze={configuration:y.definition,commands:[q,$,U,F,B,G,D],hooks:{async wrapNetworkRequest(t,e){return t}}},Ke=ze;return Ze;})();
return plugin;
}
};
