/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-gitversion",
factory: function (require) {
var plugin=(()=>{var ve=Object.create,N=Object.defineProperty;var we=Object.getOwnPropertyDescriptor;var ye=Object.getOwnPropertyNames;var ke=Object.getPrototypeOf,Pe=Object.prototype.hasOwnProperty;var Ee=t=>N(t,"__esModule",{value:!0});var g=t=>{if(typeof require!="undefined")return require(t);throw new Error('Dynamic require of "'+t+'" is not supported')};var G=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),be=(t,e)=>{for(var r in e)N(t,r,{get:e[r],enumerable:!0})},Ce=(t,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of ye(e))!Pe.call(t,i)&&i!=="default"&&N(t,i,{get:()=>e[i],enumerable:!(r=we(e,i))||r.enumerable});return t},w=t=>Ce(Ee(N(t!=null?ve(ke(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var X=G((D,Q)=>{(function(t,e){typeof define=="function"&&define.amd?define([],e):typeof D=="object"?Q.exports=e():t.compareVersions=e()})(D,function(){var t=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;function e(n,o){return n.indexOf(o)===-1?n.length:n.indexOf(o)}function r(n){var o=n.replace(/^v/,"").replace(/\+.*$/,""),p=e(o,"-"),l=o.substring(0,p).split(".");return l.push(o.substring(p+1)),l}function i(n){var o=parseInt(n,10);return isNaN(o)?n:o}function a(n){if(typeof n!="string")throw new TypeError("Invalid argument expected string");var o=n.match(t);if(!o)throw new Error("Invalid argument not valid semver ('"+n+"' received)");return o.shift(),o}function c(n,o){return typeof n!=typeof o?[String(n),String(o)]:[n,o]}function m(n,o){var[p,l]=c(i(n),i(o));return p>l?1:p<l?-1:0}function u(n,o){for(var p=0;p<Math.max(n.length,o.length);p++){var l=m(n[p]||0,o[p]||0);if(l!==0)return l}return 0}function s(n,o){[n,o].forEach(a);for(var p=r(n),l=r(o),f=0;f<Math.max(p.length-1,l.length-1);f++){var y=parseInt(p[f]||0,10),b=parseInt(l[f]||0,10);if(y>b)return 1;if(b>y)return-1}var C=p[p.length-1],L=l[l.length-1];if(C&&L){var x=C.split(".").map(i),k=L.split(".").map(i);for(f=0;f<Math.max(x.length,k.length);f++){if(x[f]===void 0||typeof k[f]=="string"&&typeof x[f]=="number")return-1;if(k[f]===void 0||typeof x[f]=="string"&&typeof k[f]=="number"||x[f]>k[f])return 1;if(k[f]>x[f])return-1}}else if(C||L)return C?-1:1;return 0}var h=[">",">=","=","<","<="],d={">":[1],">=":[0,1],"=":[0],"<=":[-1,0],"<":[-1]};function P(n){if(typeof n!="string")throw new TypeError("Invalid operator type, expected string but got "+typeof n);if(h.indexOf(n)===-1)throw new TypeError("Invalid operator, expected one of "+h.join("|"))}return s.validate=function(n){return typeof n=="string"&&t.test(n)},s.compare=function(n,o,p){P(p);var l=s(n,o);return d[p].indexOf(l)>-1},s.satisfies=function(n,o){var p=o.match(/^([<>=~^]+)/),l=p?p[1]:"=";if(l!=="^"&&l!=="~")return s.compare(n,o,l);var[f,y,b]=a(n),[C,L,x]=a(o);return m(f,C)!==0?!1:l==="^"?u([y,b],[L,x])>=0:m(y,L)!==0?!1:m(b,x)>=0},s})});var ie=G((Lt,H)=>{(function(){"use strict";var t=g("fs"),e=g("string_decoder").StringDecoder;function r(c,m,u,s,h){var d=0,s=s||"utf8",u=u||`
`,h=h||1024,P=new Buffer(h),n="",o=new e(s),p=!1,l=!1,f=-1;function y(){p||(t.close(c,function(x){if(x)throw x}),p=!0)}function b(x){function k(){t.read(c,P,0,h,d,function(W,S){var z;if(W)throw W;S<h&&(l=!0,y()),d+=S,n+=o.write(P.slice(0,S)),f<0&&(f=n.indexOf(u)),z=f===n.length-1,S&&(f===-1||z)&&!l?k():x()})}k()}function C(){return n.length>0||!l}function L(x){function k(){var W=n.substring(0,f);n=n.substring(f+u.length),f=-1,x(W)}if(f<0&&(f=n.indexOf(u)),f<0)if(l)if(C())f=n.length,k();else throw new Error("No more lines to read.");else b(k);else k()}this.hasNextLine=C,this.nextLine=L,this.close=y,b(m)}function i(c,m,u,s,h){t.open(c,"r",parseInt("666",8),function(d,P){var n;if(d)throw d;n=new r(P,function(){m(n)},u,s,h)})}function a(c,m,u,s,h){var d,P=m.length==3;function n(){d&&typeof d=="function"&&d()}return i(c,function(o){function p(){o.hasNextLine()?setImmediate(f):n()}function l(y){y!==!1?p():(n(),o.close())}function f(){o.nextLine(function(y){var b=!o.hasNextLine();P?m(y,b,l):m(y,b)!==!1?p():(n(),o.close())})}p()},u,s,h),{then:function(o){d=o}}}H.exports.open=i,H.exports.eachLine=a})()});var ae=G((Rt,oe)=>{oe.exports=function(t,e){e=e||{},e.listUnicodeChar=e.hasOwnProperty("listUnicodeChar")?e.listUnicodeChar:!1,e.stripListLeaders=e.hasOwnProperty("stripListLeaders")?e.stripListLeaders:!0,e.gfm=e.hasOwnProperty("gfm")?e.gfm:!0;var r=t||"";r=r.replace(/^(-\s*?|\*\s*?|_\s*?){3,}\s*$/gm,"");try{e.stripListLeaders&&(e.listUnicodeChar?r=r.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm,e.listUnicodeChar+" $1"):r=r.replace(/^([\s\t]*)([\*\-\+]|\d+\.)\s+/gm,"$1")),e.gfm&&(r=r.replace(/\n={2,}/g,`
`).replace(/~~/g,"").replace(/`{3}.*\n/g,"")),r=r.replace(/<[^>]*>/g,"").replace(/^[=\-]{2,}\s*$/g,"").replace(/\[\^.+?\](\: .*?$)?/g,"").replace(/\s{0,2}\[.*?\]: .*?$/g,"").replace(/\!\[.*?\][\[\(].*?[\]\)]/g,"").replace(/\[(.*?)\][\[\(].*?[\]\)]/g,"$1").replace(/^\s{0,3}>\s?/g,"").replace(/^\s{1,2}\[(.*?)\]: (\S+)( ".*?")?\s*$/g,"").replace(/^(\n)?\s{0,}#{1,6}\s+| {0,}(\n)?\s{0,}#{0,} {0,}(\n)?\s{0,}$/gm,"$1$2$3").replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g,"$2").replace(/([\*_]{1,3})(\S.*?\S{0,1})\1/g,"$2").replace(/(`{3,})(.*?)\1/gm,"$2").replace(/`(.+?)`/g,"$1").replace(/\n{2,}/g,`

`)}catch(i){return console.error(i),t}return r}});var ue=G((Tt,le)=>{var B=g("os").EOL,Te=ie(),Ve=ae(),se=/\[?v?([\w\d.-]+\.[\w\d.-]+[a-zA-Z0-9])\]?/,ce=/.*[ ](\d\d?\d?\d?[-/.]\d\d?[-/.]\d\d?\d?\d?).*/,$e=/^###/,Be=/^[*-]/,We={removeMarkdown:!0};function Se(t,e){if(typeof t=="undefined")throw new Error("missing options argument");if(typeof t=="string"&&(t={filePath:t}),typeof t=="object"){let a=typeof t.filePath!="undefined",c=typeof t.text!="undefined",m=typeof t.filePath!="string",u=typeof t.text!="string";if(!a&&!c)throw new Error("must provide filePath or text");if(a&&m)throw new Error("invalid filePath, expected string");if(c&&u)throw new Error("invalid text, expected string")}let r=Object.assign({},We,t),i=Ne(r);return typeof e=="function"&&i.then(function(a){e(null,a)}).catch(function(a){e(a)}),i}function Ne(t){let e=t.filePath,r=t.text,i={log:{versions:[]},current:null},a=Ge.bind(i,t);return new Promise(function(c,m){function u(){i.current&&fe(i),i.log.description=pe(i.log.description),i.log.description===""&&delete i.log.description,c(i.log)}r?(r.split(/\r\n?|\n/mg).forEach(a),u()):Te.eachLine(e,a,B).then(u)})}function Ge(t,e){if(!e.match(/^\[[^[\]]*\] *?:/)){if(!this.log.title&&e.match(/^# ?[^#]/)){this.log.title=e.substring(1).trim();return}if(e.match(/^##? ?[^#]/)){this.current&&this.current.title&&fe(this),this.current=Oe(),se.exec(e)&&(this.current.version=se.exec(e)[1]),this.current.title=e.substring(2).trim(),this.current.title&&ce.exec(this.current.title)&&(this.current.date=ce.exec(this.current.title)[1]);return}if(this.current){if(this.current.body+=e+B,$e.exec(e)){let r=e.replace("###","").trim();this.current.parsed[r]||(this.current.parsed[r]=[],this.current._private.activeSubhead=r)}if(Be.exec(e)){let r=t.removeMarkdown?Ve(e):e;this.current.parsed._.push(r),this.current._private.activeSubhead&&this.current.parsed[this.current._private.activeSubhead].push(r)}}else this.log.description=(this.log.description||"")+e+B}}function Oe(){return{version:null,title:null,date:null,body:"",parsed:{_:[]},_private:{activeSubhead:null}}}function fe(t){delete t.current._private,t.current.body=pe(t.current.body),t.log.versions.push(t.current)}function pe(t){return t?(t=t.trim(),t=t.replace(new RegExp("["+B+"]*"),""),t=t.replace(new RegExp("["+B+"]*$"),""),t):""}le.exports=Se});var Me={};be(Me,{default:()=>je});var T=w(g("@yarnpkg/core")),J=w(g("clipanion"));var v;(function(c){c.MAIN="main",c.PRERELEASE="prerelease",c.RELEASE="release",c.FEATURE="feature",c.UNKNOWN="unknown"})(v||(v={}));var K=w(g("child_process"));async function R(t,e,r){return new Promise((i,a)=>{console.log(">>>",t,...e);let c=(0,K.spawn)(t,e,{cwd:r}),m="",u="";c.stdout.on("data",s=>{m+=s.toString()}),c.stderr.on("data",s=>{u+=s.toString()}),c.on("close",s=>{s===0?i({code:s,result:m}):a(new Error(m+u))})})}async function Z(){return process.env.BUILD_SOURCEBRANCHNAME?process.env.BUILD_SOURCEBRANCHNAME:(await R("git",["rev-parse","--abbrev-ref","HEAD"])).result.replace(/\n*$/,"")}var F=class{static async fromContext(e){let r=await T.Configuration.find(e.cwd,e.plugins),i=await Z();return new F(r,i)}constructor(e,r){this.yarnConfig=e;let i=e.get("featureBranchPatterns");this.featureBranchPatterns=i.map(a=>new RegExp(a)),this.mainBranch=e.get("mainBranch"),this.independentVersioning=e.get("independentVersioning"),this.versionTagPrefix=e.get("versionTagPrefix"),this.versionBranch=this.parse(r)}parse(e){if(this.mainBranch===e)return{branchType:v.MAIN,name:e};for(let r of this.featureBranchPatterns)if(r.test(e)){let i=r.exec(e);if(i&&i.length===2)return{name:i[1],branchType:v.FEATURE};throw new J.UsageError(`The feature pattern '${r.source}' matched the current branch but it should result in exact 1 group match`)}return{name:"unknown",branchType:v.UNKNOWN}}},E=F;E.definition={featureBranchPatterns:{description:`Feature branches. This will apply the following rules to bumps:
  - version pattern: 'x.x.x-<<feature>>.<<increment>>'
  - always increment on each commit
  - no checking for conventional commits in git history
  - publish on npm channel '<<feature>>'`,isArray:!0,type:T.SettingsType.STRING,default:["$feature/(.*)^"]},releaseBranchPatterns:{description:`Release branches. This will apply the following rules to bumps:
  - Official release channels
  - Conventional commits enabled
  - publish on npm channel '<<release>>'`,isArray:!0,type:T.SettingsType.STRING,default:["$release/(.*)^"]},mainBranch:{description:"The main branch. This is the official channel and will produce npm packages with the lates npm disttag",type:T.SettingsType.STRING,default:"main"},independentVersioning:{description:"When independent versioning is enabled each package will have a different version based on the commits in the package folder",type:T.SettingsType.BOOLEAN,default:!1},versionTagPrefix:{description:'The prefix used for git tags. Defaults to "v"',type:T.SettingsType.STRING,default:"v"}};var Y=w(g("@yarnpkg/cli")),ee=w(g("@yarnpkg/core"));function O(t,e){let r=t;return e&&(e.scope&&(r+=`@${e.scope}/`),r+=e.name,r+="-"),r}async function V(t,e){return Promise.all(t.map(r=>q(r,e)))}async function q(t,e){if(t.manifest.version!==e)return console.log(`@${t.locator.scope}/${t.locator.name}`,t.manifest.version,"=>",e),t.manifest.version=e,t.persistManifest()}var Le=X(),$=class extends Y.BaseCommand{async execute(){let e=await E.fromContext(this.context),{project:r}=await ee.Project.find(e.yarnConfig,this.context.cwd);if(e.independentVersioning){let i=r.workspaces.map(a=>this.updateWorkspaceFromGit(e.versionTagPrefix,e.versionBranch,a));Promise.all(i)}else{let i=[this.determineCurrentGitVersion(e.versionTagPrefix,e.versionBranch),...r.workspaces.map(c=>this.determineCurrentGitVersion(e.versionTagPrefix,e.versionBranch,c.locator))],a=(await Promise.all(i)).sort(Le).reverse();await V(r.workspaces,a[0])}}async updateWorkspaceFromGit(e,r,i){let a=await this.determineCurrentGitVersion(e,r,i.locator);return q(i,a)}async determineCurrentGitVersion(e,r,i){let a=O(e,i),c=`${a}*`,s=(await R("git",["-c","versionsort.suffix=-","tag","--sort=-version:refname","--list",c])).result.split(`
`),h=s.filter(o=>new RegExp(`^${this.escapeRegExp(a)}[0-9]+.[0-9]+.[0-9]+$`).test(o));if(r.branchType!==v.MAIN){let o=s.filter(p=>new RegExp(`${a}[0-9]+.[0-9]+.[0-9]+-${this.escapeRegExp(r.name)}.[0-9]+$`).test(p));o.length>0?s=o:s=h}else s=h;s=s.filter(o=>o);let d;s.length>0?d=s[0]:d="0.0.0";let P=d,n=new RegExp(`^${this.escapeRegExp(a)}`);return P=P.replace(n,""),P}escapeRegExp(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}};$.paths=[["gitversion","restore"]];var te=w(g("@yarnpkg/cli")),A=w(g("@yarnpkg/core"));var Re="0.0.0",I=class extends te.BaseCommand{async execute(){let e=await A.Configuration.find(this.context.cwd,this.context.plugins),{project:r}=await A.Project.find(e,this.context.cwd);await V(r.workspaces,Re)}};I.paths=[["gitversion","reset"]];var ne=w(g("@yarnpkg/cli")),j=w(g("@yarnpkg/core"));async function re(t,e,r){if(t.branchType===v.FEATURE)return R("yarn",["standard-version",`--prerelease=${t.name}`,"-release-as=patch","--path=.","--skip.changelog","--no-sign","--skip.commit","--skip.tag",`--tag-prefix='${e}'`],r);if(t.branchType===v.PRERELEASE)return R("yarn",["standard-version",`--prerelease=${t.name}`,"--path=.","--no-sign","--skip.commit","--skip.tag",`--tag-prefix='${e}'`],r);if(t.branchType===v.RELEASE||t.branchType===v.MAIN)return R("yarn",["standard-version","--path=.","--no-sign","--skip.commit","--skip.tag",`--tag-prefix='${e}'`],r)}var M=class extends ne.BaseCommand{async execute(){let e=new $;e.context=this.context,e.cli=this.cli,await e.execute();let r=await E.fromContext(this.context),{project:i}=await j.Project.find(r.yarnConfig,this.context.cwd);if(r.independentVersioning)throw new Error("Not implemented");{await re(r.versionBranch,O(r.versionTagPrefix),i.topLevelWorkspace.cwd);let a=await j.Manifest.find(i.topLevelWorkspace.cwd);a.version&&await V(i.workspaces,a.version)}}};M.paths=[["gitversion","bump"]];var me=w(g("@yarnpkg/cli")),ge=w(g("@yarnpkg/core"));var he=w(g("path")),Ae=ue(),U=class extends me.BaseCommand{async execute(){let e=await E.fromContext(this.context),{project:r}=await ge.Project.find(e.yarnConfig,this.context.cwd);if(e.independentVersioning)throw new Error("Not implemented");{let a=r.workspaces.filter(s=>s.manifest.private===!1).map(s=>{let h=[];(e.versionBranch.branchType===v.FEATURE||e.versionBranch.branchType===v.PRERELEASE)&&(h=["--tag",e.versionBranch.name])});await Promise.all(a);let c=await Ae({filePath:(0,he.join)(r.topLevelWorkspace.cwd,"CHANGELOG.md"),removeMarkdown:!1}),m=r.topLevelWorkspace.manifest.version,u=c.versions.find(s=>s.version===m);u&&await r.configuration.triggerHook(s=>s.afterPublish,r,r.topLevelWorkspace,u)}}};U.paths=[["gitversion","publish"]];var de=w(g("@yarnpkg/cli")),xe=w(g("@yarnpkg/core"));var _=class extends de.BaseCommand{async execute(){let e=await E.fromContext(this.context),{project:r}=await xe.Project.find(e.yarnConfig,this.context.cwd);r.workspaces.forEach(a=>{console.log(a.locator.scope,a.locator.name,a.manifest.private,a.manifest.version)});let i=g("conventional-changelog-angular");console.log(i)}};_.paths=[["gitversion","check"]];var Ie={configuration:E.definition,commands:[_,$,I,M,U],hooks:{async wrapNetworkRequest(t,e){return t}}},je=Ie;return Me;})();
return plugin;
}
};
